import React, { useState, useEffect } from 'react';
import { Row, Col, Form, Button, Modal } from 'react-bootstrap';
import CustomerSearch from './CustomerSearch';
import DeliveryInfo from './DeliveryInfo';
import PromoCode from './PromoCode';
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { fetchShippingFee, confirmPayment, updatePromoCode, addOrderVoucher, checkVNPayPaymentStatus, generateZaloPayPayment, checkZaloPayPaymentStatus } from '../api'; // Updated import
import { toastOptions } from '../constants'; // Import constants from the new file

const PaymentInfo = ({ idOrder, orderDetail, totalAmount, delivery, phoneNumber,  setPhoneNumber  ,setDelivery , promo, setPromo,customer,setCustomer,customerInfo,setCustomerInfo }) => {
  
  
 const [wards, setWards] = useState([]);
   const [selectedProvince, setSelectedProvince] = useState('');
   const [selectedDistrict, setSelectedDistrict] = useState('');
   const [selectedWard, setSelectedWard] = useState('');
  const [paymen, setPaymen] = useState('');
  const [isCashPayment, setIsCashPayment] = useState(false);
  const [isQRModalVisible, setIsQRModalVisible] = useState(false);
  const [cashPaid, setCashPaid] = useState('');
  const [change, setChange] = useState();
  const [qrImageUrl, setQrImageUrl] = useState('');
  const [promoCode, setPromoCode] = useState("");
  const [finalAmount, setFinalAmount] = useState(totalAmount);
  const [isPaymentEnabled, setIsPaymentEnabled] = useState(false);
  const [shippingFee, setShippingFee] = useState(0);
  

  useEffect(() => {
  
  
    let calculatedDiscount = 0;
    if (promo && totalAmount >= promo.condition) {
      calculatedDiscount = promo.discountValue;
      if (promo.discountType === '1') {
        calculatedDiscount = (totalAmount * promo.discountValue) / 100;
        if (calculatedDiscount > promo.maxDiscountValue) {
          calculatedDiscount = promo.maxDiscountValue;
        }
      }
      setPromoCode(promo.voucherCode);

    } else if (promo.voucherCode) {
      setPromo({});
      setPromoCode("");
    }else{
      setPromoCode("");
    }
    setFinalAmount(totalAmount - calculatedDiscount);
  }, [totalAmount, promo, promoCode]);

  useEffect(() => {
    const isEligibleForPayment = (paymen === 1 || paymen === 3|| paymen === 2) && totalAmount >= 0 && (paymen === 1 ? change >= 0 : true);
    setIsPaymentEnabled(isEligibleForPayment);
  }, [paymen, totalAmount, change]);

  const fetchShippingFeeWrapper = async (customerInfo) => {
    if (!customerInfo.province || !orderDetail) {
      return 0;
    }
    try {
      const selectedOrderDetail = orderDetail.filter(item => String(item.order.id) === String(idOrder));
      const totalWeight = selectedOrderDetail.reduce((sum, item) => sum + item.quantity, 0) * 600;

      const response = await fetchShippingFee({
        PRODUCT_WEIGHT: totalWeight,
        ORDER_SERVICE: selectedProvince == 1 ? "PHS" : "LCOD",
        SENDER_PROVINCE: 1,
        SENDER_DISTRICT: 28,
        RECEIVER_PROVINCE: selectedProvince,
        RECEIVER_DISTRICT: selectedDistrict,
          });
          
      return response.data.data.MONEY_TOTAL;
    } catch (error) {
      console.error('Error fetching shipping fee:', error);
      return 0;
    }
  };

  useEffect(() => {
    const updateShippingFee = async () => {
      if (delivery && customerInfo.province) {
        const fee = await fetchShippingFeeWrapper(customerInfo);
        setShippingFee(fee);
      } else {
        setShippingFee(0);
      }
    };

    updateShippingFee();
  }, [delivery, customerInfo, orderDetail]); 

  const handleShowQR = async () => {
    setIsCashPayment(false);

    try {
        // Generate ZaloPay payment request
        const response = await generateZaloPayPayment({
            amount: finalAmount + shippingFee,
            description: "Thanh to√°n h√≥a ƒë∆°n",
        });

        console.log("ZaloPay Response:", response.data); // Log the response to debug

        const { qrCodeUrl, transactionId } = response.data;
        if (qrCodeUrl) {
            setQrImageUrl(qrCodeUrl); // Set the QR code URL
            setPaymen(2);
            toast.info("ƒê√£ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n QR qua ZaloPay ü•∞", toastOptions);
        } else {
            toast.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL QR t·ª´ ZaloPay!", toastOptions);
        }

        // Poll for payment status
        const interval = setInterval(async () => {
            try {
                const statusResponse = await checkZaloPayPaymentStatus(transactionId);
                console.log("Payment Status Response:", statusResponse.data); // Log payment status response
                if (statusResponse.data.status === "SUCCESS") {
                    clearInterval(interval);
                    toast.success("Thanh to√°n th√†nh c√¥ng ü•∞", toastOptions);
                    handlePaymentConfirmation(); // Trigger payment confirmation
                }
            } catch (error) {
                console.error("Error checking ZaloPay payment status:", error);
            }
        }, 3000); // Check every 3 seconds
    } catch (error) {
        console.error("Error generating ZaloPay payment:", error);
        toast.error("ƒê√£ x·∫£y ra l·ªói khi t·∫°o thanh to√°n ZaloPay!", toastOptions);
    }
  };

  const handlePrintInvoice = () => {
    const selectedOrderDetail = orderDetail.filter(item => String(item.order.id) === String(idOrder));

    const invoiceContent = `
      <html>
      <head>
      <style>
      body {
        font-family: Arial, sans-serif;
        margin: 20px;
      }
      .invoice-header {
        text-align: center;
        margin-bottom: 20px;
      }
      .invoice-header h2 {
        margin: 0;
      }
      .invoice-info {
        text-align: left;
        margin-top: 20px;
      }
      .invoice-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      .invoice-table th, .invoice-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
      }
      .invoice-table th {
        background-color: #f2f2f2;
      }
      .invoice-footer {
        text-align: left;
        margin-top: 20px;
      }
      .invoice-footer p {
        margin: 5px 0;
      }
      .thank-you {
        text-align: left;
        margin-top: 30px;
        font-size: 16px;
        font-weight: bold;
      }
      </style>
      </head>
      <body>
      <div class="invoice-header">
      <h2>H2TL</h2>
      <p>ƒê·ªãa ch·ªâ: Nam T·ª´ Li√™m, H√† N·ªôi</p>
      <p>ƒêi·ªán tho·∫°i: 0123456789</p>
      <h2>H√ìA ƒê∆†N B√ÅN H√ÄNG</h2>
      </div>
      <div class="invoice-info">
      <p><strong>T√™n nh√¢n vi√™n:</strong> Ho√†ng VƒÉn Tu·∫•n</p>
      <p><strong>M√£ h√≥a ƒë∆°n:</strong> ${selectedOrderDetail[0]?.order?.orderCode || ''}</p>
      <p><strong>Ng√†y t·∫°o:</strong> ${selectedOrderDetail[0]?.order?.createdAt || ''}</p>
      <p><strong>T√™n kh√°ch h√†ng:</strong> ${customerInfo.name || 'Kh√°ch l·∫ª'}</p>
      <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${customerInfo.phone || 'N/A'}</p>
      </div>
      <table class="invoice-table">
        <thead>
          <tr>
            <th>S·∫£n ph·∫©m</th>
            <th>S·ªë l∆∞·ª£ng</th>
            <th>ƒê∆°n gi√°</th>
            <th>Th√†nh ti·ªÅn</th>
          </tr>
        </thead>
        <tbody>
        ${
          Array.isArray(selectedOrderDetail) && selectedOrderDetail.length > 0
          ? selectedOrderDetail
          .filter(item => item.quantity > 0)
          .map(item => `
            <tr>
              <td>${item.productDetail.product.productName} - ${item.productDetail.product.productCode} - ${item.productDetail.color.colorName} - ${item.productDetail.size.sizeName}</td>
              <td>${item.quantity}</td>
              <td>${item.price.toLocaleString()} VNƒê</td>
              <td>${(item.quantity * item.price).toLocaleString()} VNƒê</td>
            </tr>
          `).join('')
          : '<tr><td colspan="4" style="text-align: center;">Kh√¥ng c√≥ s·∫£n ph·∫©m</td></tr>'
        }
        </tbody>
      </table>
      <div class="invoice-footer">
      <p><strong>T·ªïng ti·ªÅn h√†ng:</strong> ${totalAmount.toLocaleString()} VNƒê</p>
      <p><strong>Gi·∫£m gi√°:</strong> ${(totalAmount - finalAmount).toLocaleString()} VNƒê</p>
      <p><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ${shippingFee.toLocaleString()} VNƒê</p>
      <p><strong>Th√†nh ti·ªÅn: ${(finalAmount + shippingFee).toLocaleString()} VNƒê</strong></p>
      </div>
      <div class="thank-you">
      C·∫£m ∆°n Qu√Ω Kh√°ch, h·∫πn g·∫∑p l·∫°i!
      </div>
      </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(invoiceContent);
    printWindow.document.close();
    printWindow.print();
  };

  const handlePaymentConfirmation = async () => {
    if (!isPaymentEnabled) {
      toast.warn("Vui l√≤ng th·ª±c hi·ªán ƒë·ªß c√°c b∆∞·ªõc ü•∞", toastOptions);
      return;
    }
  
    const requestBody = {
      customerId: customer?.id || null,
      customerName: customerInfo.name,
      phone: customerInfo.phone,
      address: `${customerInfo.address}, ${customerInfo.ward}, ${customerInfo.district}, ${customerInfo.province}`,
      note: customerInfo.note || "",
      shippingFee: shippingFee,
      discountValue: totalAmount - finalAmount,
      totalPrice: totalAmount,
      totalPayment: finalAmount + shippingFee,
      paymentTypeId: delivery ? 2 : 1,
      paymentMethodId: paymen,
    };
  
    try {
      const response = await confirmPayment(idOrder, requestBody);
  
      if (response.status === 200) {
        toast.success("Thanh to√°n th√†nh c√¥ng ü•∞", toastOptions);
        
        if (promo.voucherCode) {
        
          await updatePromoCode(promo.id, { ...promo, quantity: promo.quantity - 1 });

          // Call API to associate voucher with the order
          await addOrderVoucher(idOrder, promo.id);
        }
        handlePrintInvoice();
        window.location.reload();
      } else {
        toast.error("Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!", toastOptions);
      }
    } catch (error) {
      console.error("Error confirming payment:", error);
      toast.error("ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i!", toastOptions);
    }
  };
  

  const handleSaveDeliveryInfo = async (customer) => {
    //setCustomer(customer);
    setDelivery(true);
    const fee = await fetchShippingFeeWrapper(customer);
    setShippingFee(fee);
  };

  return (
    <div className="container my-4">
      <h3>Th√¥ng tin thanh to√°n</h3>
      <hr />
      <br />

      <CustomerSearch

        customer={customer}
        setCustomer={setCustomer}
        setDelivery={setDelivery}
        setShippingFee={setShippingFee}
        totalAmount={totalAmount}
        setFinalAmount={setFinalAmount}
        phoneNumber={phoneNumber}
        setPhoneNumber={setPhoneNumber}
      />

  
      <DeliveryInfo delivery={delivery} setDelivery={setDelivery} onSave={handleSaveDeliveryInfo} customer={customer} setCustomer={setCustomer} customerInfo={customerInfo} setCustomerInfo={setCustomerInfo} idOrder={idOrder} totalAmount={totalAmount} 
      setSelectedProvince={setSelectedProvince} selectedProvince={selectedProvince} setSelectedDistrict={setSelectedDistrict} selectedDistrict={selectedDistrict} setSelectedWard={setSelectedWard} selectedWard={selectedWard}
      />
      <PromoCode promoCode={promoCode} setPromo={setPromo} totalAmount={totalAmount} idOrder={idOrder}  />

      {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn */}
      <h5>T·ªïng ti·ªÅn: {totalAmount.toLocaleString()} VND</h5>
      <h5>Gi·∫£m gi√°: {(totalAmount - finalAmount).toLocaleString()} VND</h5>
      <h5>Ph√≠ v·∫≠n chuy·ªÉn: {shippingFee ? shippingFee.toLocaleString() : 0} VND</h5>
      <h5>Thanh to√°n: {(finalAmount + shippingFee).toLocaleString()} VND</h5>

      {/* Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n */}
      <Row className="mb-3">
        <Col sm={7}>
          {delivery && (
            <Button
              variant={paymen === 3 ? "primary" : "light"} // Purple when "Tr·∫£ sau" is selected
              className="w-100 mb-2"
              onClick={() => {
                setPaymen(3);
                setIsCashPayment(false);
                setQrImageUrl(""); // Hide QR code
                toast.info("ƒê√£ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n Tr·∫£ sau ü•∞", toastOptions);
              }}
            >
              Tr·∫£ sau
            </Button>
          )}
          <Button
            variant={paymen === 1 ? "primary" : "light"} // Purple when "Ti·ªÅn m·∫∑t" is selected
            className="w-100"
            onClick={() => {
              setPaymen(1);
              setIsCashPayment(true);
              setQrImageUrl(""); // Hide QR code
              toast.info("ƒê√£ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n Ti·ªÅn m·∫∑t ü•∞", toastOptions);
            }}
          >
            Ti·ªÅn m·∫∑t
          </Button>
        </Col>
        <Col sm={5}>
          <Button
            variant={paymen === 2 ? "primary" : "light"} // Purple when "QR" is selected
            className="w-100"
            onClick={handleShowQR}
          >
            QR
          </Button>
        </Col>
      </Row>

      {/* Hi·ªÉn th·ªã √¥ nh·∫≠p ti·ªÅn kh√°ch tr·∫£ n·∫øu ch·ªçn ti·ªÅn m·∫∑t */}
      {isCashPayment && (
        <>
          <Row className="mb-3">
            <Col sm={12}>
              <Form.Group controlId="formCashPaid">
                <Form.Label>Ti·ªÅn kh√°ch tr·∫£</Form.Label>
                <Form.Control
                  type="number"
                  value={cashPaid}
                  onChange={(e) => {
                    setCashPaid(e.target.value);
                    setChange(e.target.value - (finalAmount + shippingFee));
                  }}
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn kh√°ch tr·∫£"
                />
              </Form.Group>
            </Col>
          </Row>
          <Row className="mb-3">
            <Col sm={12}>
              <Form.Group controlId="formChange">
                <Form.Label>Ti·ªÅn th·ª´a</Form.Label>
                <Form.Control
                  type="number"
                  value={change}
                  readOnly
                  placeholder="Ti·ªÅn th·ª´a"
                />
              </Form.Group>
            </Col>
          </Row>
        </>
      )}


      {/* Hi·ªÉn th·ªã QR Code n·∫øu c√≥ */}
      {qrImageUrl && (
        <div className="text-center mt-3">
          <img src={qrImageUrl} alt="QR Code Thanh To√°n" className="img-fluid" style={{ maxWidth: "200px" }} />
        </div>
      )}

      {/* X√°c nh·∫≠n thanh to√°n */}
      <Row>
        <Col sm={12}>
          <Button variant="primary" className="w-100" onClick={handlePaymentConfirmation} >X√°c nh·∫≠n thanh to√°n</Button>
          
        </Col>
      </Row>
    </div>
  );
};

export default PaymentInfo;