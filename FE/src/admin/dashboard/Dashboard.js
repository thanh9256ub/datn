import React, { Component } from 'react';
import DatePicker from "react-datepicker";
import circle from '../../assets/images/dashboard/circle.svg';
import { ToastContainer, toast } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';
import "react-datepicker/dist/react-datepicker.css";
import {
  fetchDashboardStatus5,
  fetchDashboardStatus2,
  fetchDashboardProduct,
  fetchDashboardRevenue
} from '../dashboard/api';

export class Dashboard extends Component {
  handleChange = date => {
    this.setState({
      startDate: date
    });
  };

  constructor(props) {
    super(props)
    this.state = {
      startDate: new Date(),
      visitSaleData: {},
      visitSaleOptions: {
        scales: {
          yAxes: [{
            ticks: {
              beginAtZero: true,
              display: false,
              min: 0,
              stepSize: 20,
              max: 80
            },
            gridLines: {
              drawBorder: false,
              color: 'rgba(235,237,242,1)',
              zeroLineColor: 'rgba(235,237,242,1)'
            }
          }],
          xAxes: [{
            gridLines: {
              display: false,
              drawBorder: false,
              color: 'rgba(0,0,0,1)',
              zeroLineColor: 'rgba(235,237,242,1)'
            },
            ticks: {
              padding: 20,
              fontColor: "#9c9fa6",
              autoSkip: true,
            },
            categoryPercentage: 0.5,
            barPercentage: 0.5
          }]
        },
        legend: {
          display: false,
        },
        elements: {
          point: {
            radius: 0
          }
        }
      },
      trafficData: {},
      trafficOptions: {
        responsive: true,
        animation: {
          animateScale: true,
          animateRotate: true
        },
        legend: false,
      },
      todos: [
        {
          id: 1,
          task: 'Pick up kids from school',
          isCompleted: false
        },
        {
          id: 2,
          task: 'Prepare for presentation',
          isCompleted: true
        },
        {
          id: 3,
          task: 'Print Statements',
          isCompleted: false
        },
        {
          id: 4,
          task: 'Create invoice',
          isCompleted: false
        },
        {
          id: 5,
          task: 'Call John',
          isCompleted: true
        },
        {
          id: 6,
          task: 'Meeting with Alisa',
          isCompleted: false
        }
      ],
      inputValue: '',
      dashboardStatus5: null,
      dashboardStatus2: null,
      dashboardProduct: null,
      dashboardRevenue: null
    }
    this.statusChangedHandler = this.statusChangedHandler.bind(this);
    this.addTodo = this.addTodo.bind(this);
    this.removeTodo = this.removeTodo.bind(this);
    this.inputChangeHandler = this.inputChangeHandler.bind(this);
  }

  componentDidMount() {
    this.fetchDashboardData();
  }

  fetchDashboardData = async () => {
    try {
      const [status5, status2, product, revenue] = await Promise.all([
        fetchDashboardStatus5(),
        fetchDashboardStatus2(),
        fetchDashboardProduct(),
        fetchDashboardRevenue()
      ]);

      this.setState({
        dashboardStatus5: status5.data,
        dashboardStatus2: status2.data,
        dashboardProduct: product.data,
        dashboardRevenue: revenue.data
      });
    } catch (error) {
      toast.error("Failed to fetch dashboard data");
    }
  };

  statusChangedHandler(event, id) {
    const todo = { ...this.state.todos[id] };
    todo.isCompleted = event.target.checked;

    const todos = [...this.state.todos];
    todos[id] = todo;

    this.setState({
      todos: todos
    })
  }

  addTodo(event) {
    event.preventDefault();

    const todos = [...this.state.todos];
    todos.unshift({
      id: todos.length ? todos[todos.length - 1].id + 1 : 1,
      task: this.state.inputValue,
      isCompleted: false
    })

    this.setState({
      todos: todos,
      inputValue: ''
    })
  }

  removeTodo(index) {
    const todos = [...this.state.todos];
    todos.splice(index, 1);

    this.setState({
      todos: todos
    })
  }

  inputChangeHandler(event) {
    this.setState({
      inputValue: event.target.value
    });
  }

  render() {
    const { dashboardStatus5, dashboardStatus2, dashboardProduct, dashboardRevenue } = this.state;

    return (
      <div>
        <div className="page-header">
          <h3 className="page-title">
            <span className="page-title-icon bg-gradient-primary text-white mr-2">
              <i className="mdi mdi-home"></i>
            </span> Dashboard </h3>
        </div>

        <div className="greeting-container" style={{ textAlign: 'center', margin: '20px 0' }}>
          <h1 style={{ color: '#00000 ', fontWeight: 'bold' }}>

            üåü Ch√†o m·ª´ng <span style={{ color: '#6C5CE7' }}>{localStorage.getItem("fullName")}</span> ƒë√£ quay tr·ªü l·∫°i! üåü
          </h1>
          <p style={{ fontSize: '18px', color: '#555' }}>
            Ch√∫c b·∫°n m·ªôt ng√†y l√†m vi·ªác hi·ªáu qu·∫£ v√† tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng!
          </p>
        </div>
        <div style={{ textAlign: 'center', margin: '30px 0' }}>
          <h2 style={{ fontSize: '24px', fontWeight: 'bold', color: '#00000' }}>
            Th√¥ng tin c·ª≠a h√†ng h√¥m nay
          </h2>
          <hr style={{ width: '50%', margin: '10px auto', border: '#00000' }} />
        </div>
        <div className="row">
          <div className="col-md-3 stretch-card grid-margin">
            <div className="card bg-gradient-danger card-img-holder text-white">
              <div className="card-body">
                <img src={circle} className="card-img-absolute" alt="circle" />
                <h4 className="font-weight-normal mb-3">ƒê∆°n ho√†n th√†nh <i className="mdi mdi-chart-line mdi-24px float-right"></i></h4>
                <h2 className="mb-5">{dashboardStatus5 || '0'}</h2>
              </div>
            </div>
          </div>
          <div className="col-md-3 stretch-card grid-margin">
            <div className="card bg-gradient-info card-img-holder text-white">
              <div className="card-body">
                <img src={circle} className="card-img-absolute" alt="circle" />
                <h4 className="font-weight-normal mb-3">ƒê∆°n x√°c nh·∫≠n <i className="mdi mdi-bookmark-outline mdi-24px float-right"></i></h4>
                <h2 className="mb-5">{dashboardStatus2 || '0'}</h2>
              </div>
            </div>
          </div>
          <div className="col-md-3 stretch-card grid-margin">
            <div className="card bg-gradient-success card-img-holder text-white">
              <div className="card-body">
                <img src={circle} className="card-img-absolute" alt="circle" />
                <h4 className="font-weight-normal mb-3">S·∫£n ph·∫©m ƒë√£ b√°n <i className="mdi mdi-diamond mdi-24px float-right"></i></h4>
                <h2 className="mb-5">{dashboardProduct || '0'}</h2>
              </div>
            </div>
          </div>
          <div className="col-md-3 stretch-card grid-margin">
            <div className="card bg-gradient-warning card-img-holder text-white">
              <div className="card-body">
                <img src={circle} className="card-img-absolute" alt="circle" />
                <h4 className="font-weight-normal mb-3">Doanh thu <i className="mdi mdi-cash mdi-24px float-right"></i></h4>
                <h2 className="mb-5">{dashboardRevenue || '0'}</h2>
              </div>
            </div>
          </div>
        </div>
        <div className="row">
          <div className="col-lg-5 grid-margin stretch-card">
            <div className="card">
              <div className="card-body p-0 d-flex">
                <div className="dashboard-custom-date-picker">
                  <DatePicker inline selected={this.state.startDate} onChange={this.handleChange} />
                </div>
              </div>
            </div>
          </div>
          <div className="col-lg-7 grid-margin stretch-card">
            <div className="card">
              <div className="card-body">
                <h4 className="card-title">Ghi ch√∫ </h4>
                <p style={{ fontSize: '16px', color: '#555', marginBottom: '20px' }}>
                  Xin ch√†o {localStorage.getItem("fullName")}, h√¥m nay l√† m·ªôt ng√†y tuy·ªát v·ªùi ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c nh·ªØng m·ª•c ti√™u m·ªõi!
                  H√£y xem qua th·ªëng k√™ doanh s·ªë ƒë·ªÉ n·∫Øm b·∫Øt t√¨nh h√¨nh.
                  V·ªõi s·ª± n·ªó l·ª±c v√† c·ªëng hi·∫øn c·ªßa b·∫°n, th√†nh c√¥ng s·∫Ω lu√¥n ƒë·ªìng h√†nh!
                </p>
                <p style={{ fontSize: '14px', color: '#777', marginBottom: '20px' }}>
                  "Th√†nh c√¥ng kh√¥ng ph·∫£i l√† ƒëi·ªÉm ƒë·∫øn, m√† l√† h√†nh tr√¨nh. H√£y ti·∫øp t·ª•c ti·∫øn b∆∞·ªõc v√† l√†m n√™n ƒëi·ªÅu k·ª≥ di·ªáu!"
                </p>
                <canvas id="visit-sale-chart" height="100"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

export default Dashboard;